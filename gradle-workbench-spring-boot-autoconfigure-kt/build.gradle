// Don't use the spring Gradle plugins here since it would try to build a bootJar requiring a Main class
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.4.RELEASE")
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.60"
    id "org.jetbrains.kotlin.plugin.spring" version "1.2.60"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

// Only reference dependencies as compileOnly since the starter will be responsible for defining all required
// transitive dependencies
dependencies {
    // This is the mandatory library supported by this Starter and handled by the auto configuration.
    // It will be a transitive dependency and will be automatically included by the consumer.
    // However the starter will define this as a required transitive dependency
    compileOnly project(":greet-library")

    // This is the optional library supported by this Starter and handled by the auto configuration.
    // It will not be a transitive dependency but has to be declared as a dependency by the consumer
    compileOnly project(":greet-opt-library")

    // Here the dependencies will be available as transitive dependencies to your final application.
    // However you may want to make these dependencies compileOnly and add them to the starter artifact.
    // If you are targeting a Kotlin-Only application you may even want to not have these as transient dependency.
    compileOnly("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compileOnly("org.jetbrains.kotlin:kotlin-reflect")

    compileOnly("org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}")
    annotationProcessor("org.springframework.boot:spring-boot-autoconfigure-processor:${springBootVersion}")
}

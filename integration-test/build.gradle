buildscript {
    ext {
        kotlin_version='1.2.61'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.4.RELEASE")
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.60"
    id "org.jetbrains.kotlin.plugin.spring" version "1.2.60"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

dependencies {
    compile project(":gradle-workbench-spring-boot-autoconfigure")
    compile project(":gradle-workbench-spring-boot-starter")
    compile project(":greet-opt-library")

    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    /****************************************
     * Test-Dependencies
     ****************************************/
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:${junitJupiterVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.assertj:assertj-core:${assertjCoreVersion}")
}

// Spring Boot is only required for tests
bootJar.enabled = false